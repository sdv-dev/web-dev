{"componentChunkName":"component---src-templates-post-js","path":"/fake-to-synthetic-ml/","result":{"data":{"ghostPost":{"id":"Ghost__Post__61927ca167598b003b3d944a","title":"From fake to synthetic data: Machine learning changes the game","slug":"fake-to-synthetic-ml","featured":true,"feature_image":"https://sdv.ghost.io/content/images/2021/11/Article-13.png","excerpt":"Creating fake data is an old concept -- but machine learning is a whole new ballgame. Learn about why ML is a key ingredient to synthetic data.","custom_excerpt":"Creating fake data is an old concept -- but machine learning is a whole new ballgame. Learn about why ML is a key ingredient to synthetic data.","visibility":"public","created_at_pretty":"15 November, 2021","published_at_pretty":"16 November, 2021","updated_at_pretty":"17 November, 2021","created_at":"2021-11-15T10:28:33.000-05:00","published_at":"2021-11-16T11:33:56.000-05:00","updated_at":"2021-11-17T14:21:39.000-05:00","meta_title":"From fake to synthetic data: Machine learning changes the game","meta_description":"Creating fake data is an old concept -- but machine learning is a whole new ballgame. Learn about why ML is a key ingredient to synthetic data.","og_description":null,"og_image":null,"og_title":null,"twitter_description":"Creating fake data is an old concept -- but machine learning is a whole new ballgame. Learn about why ML is a key ingredient to synthetic data.","twitter_image":null,"twitter_title":"From fake to synthetic data: Machine learning changes the game","authors":[{"name":"Neha Patki","slug":"neha","bio":"Neha first created the SDV for her Master's thesis at MIT and also has experience in Product Management from Google. She is excited to use her expertise to build a great SDV user experience.","profile_image":"https://sdv.ghost.io/content/images/2021/05/Neha_Patki--1-.jpg","twitter":"@n4atki","facebook":null,"website":"https://www.linkedin.com/in/nehapatki/"}],"primary_author":{"name":"Neha Patki","slug":"neha","bio":"Neha first created the SDV for her Master's thesis at MIT and also has experience in Product Management from Google. She is excited to use her expertise to build a great SDV user experience.","profile_image":"https://sdv.ghost.io/content/images/2021/05/Neha_Patki--1-.jpg","twitter":"@n4atki","facebook":null,"website":"https://www.linkedin.com/in/nehapatki/"},"primary_tag":{"name":"Product","slug":"product","description":"This blog focuses on the value that synthetic data brings to business. Our users have successfully used the SDV to augment datasets, test applications, remove bias and more. Explore new use cases, concepts and case studies.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Product","slug":"product","description":"This blog focuses on the value that synthetic data brings to business. Our users have successfully used the SDV to augment datasets, test applications, remove bias and more. Explore new use cases, concepts and case studies.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Data is a great source of information. Real data — which is based on\nobservations of real-world phenomena like weather, movements on a factory floor\nor the activities of a user base — can help us notice trends, increase business\nefficiency and solve problems. \n\nBut data can be helpful even if it isn’t real. This data, sometimes called fake\nor test data, doesn’t come directly from real-world observations, but is instead\nartificially crafted by a human or machine. The latest and most complex\niteration of this data type — what we call synthetic data — builds on previous\nwork done in this space. \n\nIn this article, we'll go through the history of fake data. By the end, you'll\nbe able to answer the following questions:\n\n * What were the original motivations and tools for manually creating data?\n * What differentiates synthetic data from other types of fake data?\n * What role does machine learning play in generating synthetic data?\n\nThe Dawn of Fake Data: Test Data Management\nOne group of people has worked with fake data for a long time: software\nengineers. They need data in order to test the systems they build, and the real\nstuff isn't always usable (for example, due to privacy). \n\nLet's pretend it's the early 2000s, and you're an IT professional working at a\nbank. You're responsible for the software that updates account balances after\neach transaction. You'd like to test this software before putting it into\nproduction. What do you do?\n\nMost likely, you'll come up with a few test scenarios to ensure that your\nfunctionality — updating the balance — can properly handle a variety of inputs.\n\nThis table shows a few scenarios you may use to test your system. In these\nscenarios, you're testing how a monetary transfer of $20 changes the balance in\ndifferent accounts.Notice that in order to create these scenarios, you had to\ngenerate data: various starting balances ($500, $20, $10) as well as a transfer\namount ($20). This is an early version of using fake data in order to test your\nsoftware!\n\nUsing Tools for Manual Creation\n\nNow let's fast forward in time. Over the years, your software has gotten even\nmore complex, and you're constantly adding new functionalities. For example,\nmaybe you start allowing transfers with foreign currency. \n\nYou need to test these functionalities before you roll them out. To save time,\nyou might end up using -- or creating -- a tool that allows you to generate and\nmanage fake data for testing. \n\nThe simplest tool may be a basic permutation, as illustrated below.\n\nA simple manual test data generation tool that uses permutations. The resulting\nscenarios -- with different starting balances, transfer amounts and transfer\ncurrencies -- are outputted as a data table.A more sophisticated tool might\nallow you greater control over the rules the data must follow. It will also\nallow you to create more columns as your functionalities increase. For example,\nmaybe the bank now offers two different account types: Premium and Normal. \n\nNow you need a test data generation tool that can handle all of these variables\nand come out with something like this:\n\nA more sophisticated test data tool will allow you to specify rules manually. It\nwill follow them to generate test data.Many test data management tools use\nsophisticated logic to precisely create these data columns and their values. But\nthe rules they use are manually written, and rely on human intuition and domain\nknowledge. For example:\n\n * Account type = Premium 10% of the time and Normal 90% of the time\n * Starting balance is between $10,000 and $250,000 if Account type = Premium\n   or between -$1,000 and $10,000 if Account type = Normal\n * Transfer amount follows a bell curve with a mean of $7,500 and standard\n   deviation of $1,000\n * Etc.\n\nThere are downsides to this manual approach. It takes time and effort to come up\nwith these rules, to keep track of them, and to update them as your application\nchanges.\n\nAdding Machine Learning\nAdopting machine learning (ML) opens up entirely new avenues in data generation.\nIn the process, it gets rid of some of these downsides.\n\nAt a high level, ML-based software (such as the Synthetic Data Vault\n[https://sdv.dev/blog/intro-to-sdv/]) works in three steps:\n\n 1. The user inputs real data into the ML software\n 2. The ML software automatically learns patterns in the data\n 3. The software outputs data that contains those patterns\n\nLet's go back to our banking example to see how this works. It's now 2021 and\nyou're using the SDV [https://sdv.dev/] to generate your test data. You input\nall the transactions your bank has handled in the last week. \n\nAfter modeling, the SDV outputs entirely new data that looks and behaves like\nthe original. An illustration of this is shown below.\n\nWith ML tools (like the SDV), you input real data into the software. The\nsoftware then learns patterns from the data and outputs data that matches those\npatterns.Notice that the output data contains many of the same properties as the\noriginal. The model learned all of the following information:\n\n * Ranges & Categories. Transfers range from $5K to $10K. Bank accounts can be\n   either premium or normal. Etc.\n * Shapes. 10% of accounts are premium. Transfers follow a bell curve\n   distribution with a mean of $7,500 and a standard deviation of $1,000. Etc.\n * Correlations. Premium bank accounts tend to have higher balances ($10K to\n   $250K) than normal accounts (-$1K to $10K).\n\nIn other words: while the old test data management tools required you to\nmanually come up with rules, ML-based tools learn these rules automatically. \nMoreover, they can learn new information. For example, the ML picked upon a\ncouple of extra correlations:\n\n * Premium accounts are more likely to transfer foreign currency.\n * Normal accounts are more likely to be overdrawn (transfer more than their\n   current balance).\n\nUsing an ML-based data generation tool will help you ensure that your software\nis robust against these typical cases. And while manual data generation tools\ngenerate fake data, ML-based approaches generate what we call synthetic data.\n\nAsk whether you had to input any real data or rules. Based on this, you'll know\nwhether you are dealing with synthetic data or fake data.Benefits of Synthetic\nData\n\nThere are some clear advantages to using synthetic data over fake data,\nespecially in software testing. Below, we've detailed a few.\n\n * Saves time with automation. Because ML automatically learns patterns from the\n   real data, there is no need to spend a lot of time coming up with and\n   inputting rules. ML learns rules that you may even miss.\n * Is usable by non-experts. Realistic fake data can only be generated by domain\n   experts, who know the precise rules governing the dataset. However, anyone\n   can generate synthetic data. All they have to do is input the real data and\n   the ML software takes care of the rest!\n * Increases adaptability. Applications and data will inevitably change over\n   time. It's easy to update synthetic data as this happens, simply by\n   retraining the ML model with newer data.\n\nBenefits of synthetic data expand beyond software testing. The SDV Community is\nusing synthetic data for an ever-increasing variety of tasks, including machine\nlearning development, de-biasing datasets and scenario planning.\n\nKey Takeaways\nIn this article, we surveyed numerous ways of creating and using data  that is\nnot real. In particular, we learned that:\n\n * Creating fake data is not a novel concept. Older generations of tools will\n   output fake data when given an explicit list of rules. This is especially\n   useful for software testing.\n * Adding ML to this process is a newer evolution. Users input real data into\n   the ML model, and it's able to automatically infer the rules. Data generated\n   using ML-based systems is known as synthetic data.\n * Synthetic data's key advantages include its automation and adaptability. The\n   uses of synthetic data expand beyond software testing.\n\nIn future articles, we'll put ML models to the test! We'll uncover their\nstrengths and weaknesses, and guide you through getting the most from synthetic\ndata using the Synthetic Data Vault.","html":"<p>Data is a great source of information. Real data — which is based on observations of real-world phenomena like weather, movements on a factory floor or the activities of a user base — can help us notice trends, increase business efficiency and solve problems. </p><p>But data can be helpful even if it isn’t real. This data, sometimes called fake or test data, doesn’t come directly from real-world observations, but is instead artificially crafted by a human or machine. The latest and most complex iteration of this data type — what we call synthetic data — builds on previous work done in this space. </p><p>In this article, we'll go through the history of fake data. By the end, you'll be able to answer the following questions:</p><ul><li>What were the original motivations and tools for manually creating data?</li><li>What differentiates synthetic data from other types of fake data?</li><li>What role does machine learning play in generating synthetic data?</li></ul><h3 id=\"the-dawn-of-fake-data-test-data-management\">The Dawn of Fake Data: Test Data Management</h3><p>One group of people has worked with fake data for a long time: software engineers. They need data in order to test the systems they build, and the real stuff isn't always usable (for example, due to privacy). </p><p>Let's pretend it's the early 2000s, and you're an IT professional working at a bank. You're responsible for the software that updates account balances after each transaction. You'd like to test this software before putting it into production. What do you do?</p><p>Most likely, you'll come up with a few test scenarios to ensure that your functionality — updating the balance — can properly handle a variety of inputs.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://sdv.ghost.io/content/images/2021/11/Article-09--1-.png\" class=\"kg-image\" alt=\"This table shows a few scenarios you may use to test your system. In these scenarios, you're testing how a monetary transfer of $20 changes the balance in different accounts.\" loading=\"lazy\" width=\"2000\" height=\"541\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2021/11/Article-09--1-.png 600w, https://sdv.ghost.io/content/images/size/w1000/2021/11/Article-09--1-.png 1000w, https://sdv.ghost.io/content/images/size/w1600/2021/11/Article-09--1-.png 1600w, https://sdv.ghost.io/content/images/size/w2400/2021/11/Article-09--1-.png 2400w\" sizes=\"(min-width: 720px) 720px\"><figcaption>This table shows a few scenarios you may use to test your system. In these scenarios, you're testing how a monetary transfer of $20 changes the balance in different accounts.</figcaption></figure><p>Notice that in order to create these scenarios, you had to generate data: various starting balances ($500, $20, $10) as well as a transfer amount ($20). This is an early version of using fake data in order to test your software!</p><p><strong>Using Tools for Manual Creation</strong></p><p>Now let's fast forward in time. Over the years, your software has gotten even more complex, and you're constantly adding new functionalities. For example, maybe you start allowing transfers with foreign currency. </p><p>You need to test these functionalities before you roll them out. To save time, you might end up using -- or creating -- a tool that allows you to generate and manage fake data for testing. </p><p>The simplest tool may be a basic permutation, as illustrated below.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://sdv.ghost.io/content/images/2021/11/Article-07-2.png\" class=\"kg-image\" alt=\"A simple manual test data generation tool that uses permutations. The resulting scenarios -- with different starting balances, transfer amounts and transfer currencies -- are outputted as a data table.\" loading=\"lazy\" width=\"1723\" height=\"809\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2021/11/Article-07-2.png 600w, https://sdv.ghost.io/content/images/size/w1000/2021/11/Article-07-2.png 1000w, https://sdv.ghost.io/content/images/size/w1600/2021/11/Article-07-2.png 1600w, https://sdv.ghost.io/content/images/2021/11/Article-07-2.png 1723w\" sizes=\"(min-width: 720px) 720px\"><figcaption>A simple manual test data generation tool that uses permutations. The resulting scenarios -- with different starting balances, transfer amounts and transfer currencies -- are outputted as a data table.</figcaption></figure><p>A more sophisticated tool might allow you greater control over the rules the data must follow. It will also allow you to create more columns as your functionalities increase. For example, maybe the bank now offers two different account types: Premium and Normal. </p><p>Now you need a test data generation tool that can handle all of these variables and come out with something like this:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://sdv.ghost.io/content/images/2021/11/Article-11.png\" class=\"kg-image\" alt=\"A more sophisticated test data tool will allow you to specify rules manually. It will follow them to generate test data.\" loading=\"lazy\" width=\"1955\" height=\"655\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2021/11/Article-11.png 600w, https://sdv.ghost.io/content/images/size/w1000/2021/11/Article-11.png 1000w, https://sdv.ghost.io/content/images/size/w1600/2021/11/Article-11.png 1600w, https://sdv.ghost.io/content/images/2021/11/Article-11.png 1955w\" sizes=\"(min-width: 720px) 720px\"><figcaption>A more sophisticated test data tool will allow you to specify rules manually. It will follow them to generate test data.</figcaption></figure><p>Many test data management tools use sophisticated logic to precisely create these data columns and their values. But the rules they use are manually written, and rely on human intuition and domain knowledge. For example:</p><ul><li>Account type = Premium 10% of the time and Normal 90% of the time</li><li>Starting balance is between $10,000 and $250,000 if Account type = Premium<br>or between -$1,000 and $10,000 if Account type = Normal</li><li>Transfer amount follows a bell curve with a mean of $7,500 and standard deviation of $1,000</li><li>Etc.</li></ul><p>There are downsides to this manual approach. It takes time and effort to come up with these rules, to keep track of them, and to update them as your application changes.</p><h3 id=\"adding-machine-learning\">Adding Machine Learning</h3><p>Adopting machine learning (ML) opens up entirely new avenues in data generation. In the process, it gets rid of some of these downsides.</p><p>At a high level, ML-based software (such as the <a href=\"https://sdv.dev/blog/intro-to-sdv/\">Synthetic Data Vault</a>) works in three steps:</p><ol><li>The user inputs real data into the ML software</li><li>The ML software automatically learns patterns in the data</li><li>The software outputs data that contains those patterns</li></ol><p>Let's go back to our banking example to see how this works. It's now 2021 and you're using <a href=\"https://sdv.dev/\">the SDV</a> to generate your test data. You input all the transactions your bank has handled in the last week. </p><p>After modeling, the SDV outputs entirely new data that looks and behaves like the original. An illustration of this is shown below.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://sdv.ghost.io/content/images/2021/11/Article-10.png\" class=\"kg-image\" alt=\"With ML tools (like the SDV), you input real data into the software. The software then learns patterns from the data and outputs data that matches those patterns.\" loading=\"lazy\" width=\"2000\" height=\"516\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2021/11/Article-10.png 600w, https://sdv.ghost.io/content/images/size/w1000/2021/11/Article-10.png 1000w, https://sdv.ghost.io/content/images/size/w1600/2021/11/Article-10.png 1600w, https://sdv.ghost.io/content/images/size/w2400/2021/11/Article-10.png 2400w\" sizes=\"(min-width: 720px) 720px\"><figcaption>With ML tools (like the SDV), you input real data into the software. The software then learns patterns from the data and outputs data that matches those patterns.</figcaption></figure><p>Notice that the output data contains many of the same properties as the original. The model learned all of the following information:</p><ul><li><strong>Ranges &amp; Categories.</strong> Transfers range from $5K to $10K. Bank accounts can be either premium or normal. Etc.</li><li><strong>Shapes.</strong> 10% of accounts are premium. Transfers follow a bell curve distribution with a mean of $7,500 and a standard deviation of $1,000. Etc.</li><li><strong>Correlations.</strong> Premium bank accounts tend to have higher balances ($10K to $250K) than normal accounts (-$1K to $10K).</li></ul><p>In other words: <strong>while the old test data management tools required you to manually come up with rules, ML-based tools learn these rules automatically.</strong> <strong> </strong>Moreover, they can learn new information. For example, the ML picked upon a couple of extra correlations:</p><ul><li>Premium accounts are more likely to transfer foreign currency.</li><li>Normal accounts are more likely to be overdrawn (transfer more than their current balance).</li></ul><p>Using an ML-based data generation tool will help you ensure that your software is robust against these typical cases. And while manual data generation tools generate fake data, <strong>ML-based approaches generate what we call synthetic data.</strong></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://sdv.ghost.io/content/images/2021/11/Article-08-1.png\" class=\"kg-image\" alt=\"Ask whether you had to input any real data or rules. Based on this, you'll know whether you are dealing with synthetic data or fake data.\" loading=\"lazy\" width=\"1574\" height=\"419\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2021/11/Article-08-1.png 600w, https://sdv.ghost.io/content/images/size/w1000/2021/11/Article-08-1.png 1000w, https://sdv.ghost.io/content/images/2021/11/Article-08-1.png 1574w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Ask whether you had to input any real data or rules. Based on this, you'll know whether you are dealing with synthetic data or fake data.</figcaption></figure><p><strong>Benefits of Synthetic Data</strong></p><p>There are some clear advantages to using synthetic data over fake data, especially in software testing. Below, we've detailed a few.</p><ul><li><strong>Saves time with automation.</strong> Because ML automatically learns patterns from the real data, there is no need to spend a lot of time coming up with and inputting rules. ML learns rules that you may even miss.</li><li><strong>Is usable by non-experts. </strong>Realistic fake data can only be generated by domain experts, who know the precise rules governing the dataset. However, anyone can generate synthetic data. All they have to do is input the real data and the ML software takes care of the rest!</li><li><strong>Increases adaptability. </strong>Applications and data will inevitably change over time. It's easy to update synthetic data as this happens, simply by retraining the ML model with newer data.</li></ul><p>Benefits of synthetic data expand beyond software testing. The SDV Community is using synthetic data for an ever-increasing variety of tasks, including machine learning development, de-biasing datasets and scenario planning.</p><h3 id=\"key-takeaways\">Key Takeaways</h3><p>In this article, we surveyed numerous ways of creating and using data  that is not real. In particular, we learned that:</p><ul><li>Creating fake data is not a novel concept. Older generations of tools will output fake data when given an explicit list of rules. This is especially useful for software testing.</li><li>Adding ML to this process is a newer evolution. Users input real data into the ML model, and it's able to automatically infer the rules. Data generated using ML-based systems is known as <strong>synthetic data</strong>.</li><li>Synthetic data's key advantages include its automation and adaptability. The uses of synthetic data expand beyond software testing.</li></ul><p>In future articles, we'll put ML models to the test! We'll uncover their strengths and weaknesses, and guide you through getting the most from synthetic data using the Synthetic Data Vault.</p>","url":"https://sdv.ghost.io/fake-to-synthetic-ml/","canonical_url":null,"uuid":"b2a72ccc-d24f-42ad-90fb-23d0017e2529","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"61927ca167598b003b3d944a","reading_time":6}},"pageContext":{"slug":"fake-to-synthetic-ml"}},"staticQueryHashes":["2061773391","2358152166","2362887240","2439066133","2561578252","2657115718","2731221146","2839364760","4145280475"]}