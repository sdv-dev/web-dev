{"componentChunkName":"component---src-templates-post-js","path":"/building-unique-combinations/","result":{"data":{"ghostPost":{"id":"Ghost__Post__61e841116361ff003b9ca712","title":"Building the Unique Combinations Constraint in the SDV","slug":"building-unique-combinations","featured":false,"feature_image":"https://sdv.ghost.io/content/images/2022/01/Banner-UC.png","excerpt":"Sometimes, you want to limit the amount of permutations in your synthetic data. Explore the strategies we used for enforcing this kind of logic.","custom_excerpt":"Sometimes, you want to limit the amount of permutations in your synthetic data. Explore the strategies we used for enforcing this kind of logic.","visibility":"public","created_at_pretty":"19 January, 2022","published_at_pretty":"25 January, 2022","updated_at_pretty":"26 January, 2022","created_at":"2022-01-19T11:49:21.000-05:00","published_at":"2022-01-25T13:25:20.000-05:00","updated_at":"2022-01-26T17:55:37.000-05:00","meta_title":"Building Unique Combinations","meta_description":"Sometimes, you want to limit the amount of permutations in your synthetic data. Explore the strategies we used for enforcing this kind of logic.","og_description":null,"og_image":null,"og_title":null,"twitter_description":"Sometimes, you want to limit the amount of permutations in your synthetic data. Explore the strategies we used for enforcing this kind of logic.","twitter_image":null,"twitter_title":"Building Unique Combinations","authors":[{"name":"Neha Patki","slug":"neha","bio":"Neha first created the SDV for her Master's thesis at MIT and also has experience in Product Management from Google. She is excited to use her expertise to build a great SDV user experience.","profile_image":"https://sdv.ghost.io/content/images/2021/05/Neha_Patki--1-.jpg","twitter":"@n4atki","facebook":null,"website":"https://www.linkedin.com/in/nehapatki/"}],"primary_author":{"name":"Neha Patki","slug":"neha","bio":"Neha first created the SDV for her Master's thesis at MIT and also has experience in Product Management from Google. She is excited to use her expertise to build a great SDV user experience.","profile_image":"https://sdv.ghost.io/content/images/2021/05/Neha_Patki--1-.jpg","twitter":"@n4atki","facebook":null,"website":"https://www.linkedin.com/in/nehapatki/"},"primary_tag":{"name":"Engineering","slug":"engineering","description":"The SDV engineering team is serving a global, open source user base. In our engineering blog, we highlight engineering challenges and design decisions we've made in support of our community.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Engineering","slug":"engineering","description":"The SDV engineering team is serving a global, open source user base. In our engineering blog, we highlight engineering challenges and design decisions we've made in support of our community.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By default, a machine learning model (ML) may not always learn the deterministic\nrules in your dataset. We've previously explored how the SDV allows user to \ninput their logic [https://sdv.dev/blog/eng-sdv-constraints/] using constraints.\nWith constraints, an SDV model produces logically correct data 100% of the time.\n\nWhile an end user might expect the constraint to \"just work,\" engineering this\nfunctionality requires some creative techniques. In this article, we'll describe\nthe techniques we used to build the UniqueCombinations constraint. You can also\nfollow along in our notebook\n[https://colab.research.google.com/drive/1bY8y6m7-CjTxWDepw32-ZT3Ubb9RGK5F?usp=sharing]\n.\n\n!pip install sdv==0.13.1\n\nimport numpy as np\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nWhat is a Unique Combinations Constraint?\nUsers frequently encounter logical constraints on the permutations -- mixing &\nmatching -- that are allowed in synthetic data.\n\nTo illustrate this, let's use the world_v1 dataset from the SDV tabular dataset\ndemos. This simple dataset describes the population of different cities around\nthe world.\n\nfrom sdv.demo import load_tabular_demo\n\ndata = load_tabular_demo('world_v1')\ndata = data.drop(['add_numerical'], axis=1) # not needed for this demo\ndata.head()\n\nRelationship between Name, CountryCode and District\n\nLooking at the data, we can observe that there is a special relationship between\nthe Name of the city, its CountryCode and its geographical District: When\ngenerating synthetic data, the model should not blindly mix-and-match these\nvalues. Instead, it should reference the real data to verify whether the\ncombination is valid. This is called a UniqueCombinations constraint.\n\nFor example, take a particular city, like Cambridge, which appears 3 times in\nour dataset.\n\ndata[data.Name == 'Cambridge']\n\nThe constraint states that Cambridge should only ever appear with GBR (England), \nCAN (Ontario) or USA (Massachusetts). It is invalid if it appears in any other\nregion -- for eg. Cambridge, France.\n\nHow does the SDV handle a Unique Combination out-of-the-box?\n\nLet's try running the sdv as-is on the dataset to see what happens. We'll use\nthe GaussianCopula model on our dataset.\n\nfrom sdv.tabular import GaussianCopula\n\nnp.random.seed(0)\n\nmodel = GaussianCopula(\n  categorical_transformer='label_encoding' # optimize speed\n) \nmodel.fit(data)\n\nNow, let's generate some rows to inspect the synthetic data.\n\nnp.random.seed(12)\nmodel.sample(5)\n\nAlthough the sdv is generating known city names, countries and districts, their\ncombinations don't make sense. We can also go back to our original example and\ngenerate only some rows for Cambridge.\n\nnp.random.seed(10)\n\nconditions = {'Name': 'Cambridge'}\nmodel.sample(5, conditions=conditions)\n\nThe result is a variety of Cambridges that aren't necessarily in USA, GBR, or\nCAN. These aren't valid cities!\n\nWhat's going on? The SDV models include probabilities that some unseen\ncombinations are possible. This is by design: Synthesizing new combinations --\nthat don't blatantly match the original data -- helps with privacy.\n\nHowever in this particular case, we aren't worried about the privacy of a city\nbelonging to a country or district. We actually do want the data to match. This\nis why we need to build a constraint.\n\nFixing the data using rejecting sampling\nIn our previous article [https://sdv.dev/blog/eng-sdv-constraints/], we\ndescribed a solution called reject_sampling that works on any type of constraint\nand is very easy to build: We simply create the synthetic data as usual and then\nthrow out (reject) any data that doesn't match.\n\nIn theory, this can solve our UniqueCombinations constraint. In practice, this\nstrategy is only efficient if the model can easily generate acceptable data.\nLet's calculate the chances of getting an acceptable combination (Name, \nCountryCode, District) from the model.\n\nnp.random.seed(0)\n\n# Sample data from the model\n# The sample may include combinations that aren't valid\nn = 100000\nnew_data = model.sample(n)\n\n# Calculate how many rows are valid\ncombo = ['Name', 'CountryCode', 'District']\nmerged = new_data.merge(data, left_on=combo, right_on=combo, how='left')\npassed = merged[merged['ID_y'].notna()].shape[0]\n\n# Print out our results\nprint(\"Valid rows: \", (passed/n)*100, \"%\")\nprint(\"Rejected rows: \", (1 - passed/n)*100, \"%\")\n\nValid rows:  0.038 %\nRejected rows:  99.96199999999999 %\n\nWith such a low probability of passing the constraint, this strategy can become\nintractable.\n\nFixing the data using transformations\nA more efficient strategy is for the ML model to learn the constraint directly,\nso it always produces acceptable data. We can do this by transforming the data\nin a clever way, forcing the model to learn the logic.\n\nOur previous article [https://sdv.dev/blog/eng-sdv-constraints/] described how\nto do this for a different constraint. Unfortunately, the exact same\ntransformation won't work to solve our current UniqueCombinations constraint. \nThe transform strategy requires a different, creative solution for each\nconstraint. So we have to start from scratch.\n\nCan you think of any other ways to enforce UniqueCombinations?\n\nA solution: Concatenating the data\n\nOne solution is to concatenate the data. That is, rather than treating the city \nName, CountryCode and District as separate items, we treat them as a single\nvalue. This will force the model to learn them as 1 single concept rather than\nas multiple columns that can be recombined.\n\nLet's see this in action.\n\n# create transformed data that concatenates the columns\ndata_transform = data.copy()\n\n# Concatenate the data using a separator\ndata_transform['concatenated'] = data_transform['Name'] + '#' + data_transform['CountryCode'] + '#' + data_transform['District']\n\n# We can drop the individual columns\ndata_transform.drop(labels=['Name', 'CountryCode', 'District'],\n                    axis=1, inplace=True)\n\ndata_transform.head()\n\nNow, we can train the model using the transformed (concatenated) data instead.\n\nnp.random.seed(35)\n\n# create a new model that will learn from the transformed data\nmodel_transform = GaussianCopula(categorical_transformer='label_encoding')\nmodel_transform.fit(data_transform)\n\n# this will produce transformed data\noutput = model_transform.sample()\noutput.head(5)\n\nTo get back realistic-looking data, we can convert the concatenated column back\ninto Name, City and District.\n\nimport pandas as pd\n\n# Split the conatenated column by the separator and save the reuslts\nnames = []\ncountrycodes = []\ndistricts = []\n\nfor x in output['concatenated']:\n  try:\n    name, countrycode, district = x.split('#')\n  except:\n    name, countrycode, district = [np.nan]*3\n  names.append(name)\n  countrycodes.append(countrycode)\n  districts.append(district)\n\n# Add the individual columns back in\noutput['Name'] = pd.Series(names)\noutput['CountryCode'] = pd.Series(countrycodes)\noutput['District'] = pd.Series(districts)\n\n# Drop the concatenated column\noutput.drop(labels=['concatenated'], axis=1, inplace=True)\n\nAs a result, the output now looks like our original data.\n\noutput.head()\n\nMost importantly, the Name, CountryCode and District columns now make sense!\n\nCaveats of transforming the data\n\nThe transform strategy is an efficient and elegant approach to modeling. But\nthere is a downside: The transform strategy might lose some mathematical\nproperties.\n\nTo see why, consider the model's perspective:\n\n * Cambridge#GBR#England is completely different from\n * Cambridge#USA#Massachusetts is completely different from\n * Boston#USA#Massachusetts\n\nThe problem is that two of these actually have something in common -- they are\nlocated in Massachusetts, USA. So the model will not be able to learn anything\nspecial about Massachusetts or USA as a whole.\n\nAs an example, let's see how well the model was able to learn populations of\nUS-based cities.\n\nimport matplotlib.pyplot as plt\n\n# Populations of real US cities\nreal_usa = data.loc[data['CountryCode'] == 'USA', 'Population']\n\n# Populations of synthetic US cities\nsynth_usa = output.loc[output['CountryCode'] == 'USA', 'Population']\n\n# Plot the distributions\nplt.ylabel('US City Data')\nplt.xlabel('Population')\n_ = plt.boxplot([real_usa, synth_usa],\n                showfliers=False,\n                labels=['Real', 'Synthetic'],\n                vert=False\n)\nplt.show()\n\nThe real data shows less variation in city population than the synthetic data.\nThe differences make sense because our model wasn't able to learn about the USA\nas one complete concept.\n\nCan we fix this? It's challenging to fix this issue without degrading the\nmathematical correlations in some other way. If you have any ideas, we welcome\nyou to join our discussion [https://github.com/sdv-dev/SDV/issues/414]!\n\nInputting a UniqueCombination into the SDV\nWe built the constraint -- both the reject_sampling and transform approaches --\ndirectly into the SDV library. If you have sdv installed, this is ready to use.\nImport the UniqueCombinations class from the constraints module.\n\nfrom sdv.constraints import UniqueCombinations\n\n# Create a Unique Combinations constraint\nunique_city_country_district = UniqueCombinations(\n  columns=['Name', 'CountryCode', 'District'],\n  handling_strategy='transform' # you can change this 'reject_sampling' too\n)\n\n# Create a new model using the constraint\nupdated_model = GaussianCopula(\n  constraints=[unique_city_country_district],\n  categorical_transformer='label_encoding'\n)\n\nNow, you can train the model on your data and sample synthetic data.\n\nnp.random.seed(35)\n\nupdated_model.fit(data)\nupdated_model.sample(5)\n\nAll of the synthetic data is guaranteed to follow the UniqueCombinations \nconstraint.\n\nTakeaways\n 1. We can identify a UniqueCombinations requirement by asking: Should it be\n    possible to further mix-and-match the data?\n 2. We can enforce any logical constraint by using reject sampling, which throws\n    out any invalid data. This is not efficient for UniqueCombinations.\n 3. An alternative approach is to transform the data, forcing the ML model to\n    learn the constraint. For UniqueCombinations we transformed the data by\n    concatenating it.\n 4. The logic for UniqueCombinations is already built into the SDV's constraints \n    module, and is ready to use.\n\nFurther reading:\n\n * Engineering Constraints Blog Article\n   [https://sdv.dev/blog/eng-sdv-constraints/]\n * Handling Constraints User Guide\n   [https://sdv.dev/SDV/user_guides/single_table/constraints.html]\n * Tabular Constraints API\n   [https://sdv.dev/SDV/api_reference/constraints/tabular.html]","html":"<p>By default, a machine learning model (ML) may not always learn the deterministic rules in your dataset. We've previously explored how the SDV allows user to <a href=\"https://sdv.dev/blog/eng-sdv-constraints/\" rel=\"nofollow\">input their logic</a> using constraints. With constraints, an SDV model produces logically correct data 100% of the time.</p><p>While an end user might expect the constraint to \"just work,\" engineering this functionality requires some creative techniques. In this article, we'll describe the techniques we used to build the <code>UniqueCombinations</code> constraint. You can also follow along in our <a href=\"https://colab.research.google.com/drive/1bY8y6m7-CjTxWDepw32-ZT3Ubb9RGK5F?usp=sharing\">notebook</a>.</p><pre><code>!pip install sdv==0.13.1</code></pre><pre><code class=\"language-python\">import numpy as np\nimport warnings\n\nwarnings.filterwarnings('ignore')</code></pre><h3 id=\"what-is-a-unique-combinations-constraint\">What is a Unique Combinations Constraint?</h3><p>Users frequently encounter logical constraints on the permutations -- mixing &amp; matching -- that are allowed in synthetic data.</p><p>To illustrate this, let's use the <code>world_v1</code> dataset from the SDV tabular dataset demos. This simple dataset describes the population of different cities around the world.</p><pre><code class=\"language-python\">from sdv.demo import load_tabular_demo\n\ndata = load_tabular_demo('world_v1')\ndata = data.drop(['add_numerical'], axis=1) # not needed for this demo\ndata.head()</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.51.49-AM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1014\" height=\"362\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2022/01/Screen-Shot-2022-01-19-at-11.51.49-AM.png 600w, https://sdv.ghost.io/content/images/size/w1000/2022/01/Screen-Shot-2022-01-19-at-11.51.49-AM.png 1000w, https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.51.49-AM.png 1014w\" sizes=\"(min-width: 720px) 720px\"></figure><p><strong>Relationship between <code>Name</code>, <code>CountryCode</code> and <code>District</code></strong></p><p>Looking at the data, we can observe that there is a special relationship between the <code>Name</code> of the city, its <code>CountryCode</code> and its geographical <code>District</code>: When generating synthetic data, the model should not blindly mix-and-match these values. Instead, it should <strong>reference the real data to verify whether the combination is valid.</strong> This is called a <code>UniqueCombinations</code> constraint.</p><p>For example, take a particular city, like <code>Cambridge</code>, which appears 3 times in our dataset.</p><pre><code class=\"language-python\">data[data.Name == 'Cambridge']</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.53.07-AM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1020\" height=\"248\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2022/01/Screen-Shot-2022-01-19-at-11.53.07-AM.png 600w, https://sdv.ghost.io/content/images/size/w1000/2022/01/Screen-Shot-2022-01-19-at-11.53.07-AM.png 1000w, https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.53.07-AM.png 1020w\" sizes=\"(min-width: 720px) 720px\"></figure><p>The constraint states that <code>Cambridge</code> should only ever appear with <code>GBR (England)</code>, <code>CAN (Ontario)</code> or <code>USA (Massachusetts)</code>. It is invalid if it appears in any other region -- for eg. Cambridge, France.</p><p><strong>How does the SDV handle a Unique Combination out-of-the-box?</strong></p><p>Let's try running the <code>sdv</code> as-is on the dataset to see what happens. We'll use the <code>GaussianCopula</code> model on our dataset.</p><pre><code class=\"language-python\">from sdv.tabular import GaussianCopula\n\nnp.random.seed(0)\n\nmodel = GaussianCopula(\n  categorical_transformer='label_encoding' # optimize speed\n) \nmodel.fit(data)</code></pre><p>Now, let's generate some rows to inspect the synthetic data.</p><pre><code class=\"language-python\">np.random.seed(12)\nmodel.sample(5)</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.54.31-AM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"940\" height=\"360\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2022/01/Screen-Shot-2022-01-19-at-11.54.31-AM.png 600w, https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.54.31-AM.png 940w\" sizes=\"(min-width: 720px) 720px\"></figure><p>Although the <code>sdv</code> is generating known city names, countries and districts, their combinations don't make sense. We can also go back to our original example and generate only some rows for <code>Cambridge</code>.</p><pre><code class=\"language-python\">np.random.seed(10)\n\nconditions = {'Name': 'Cambridge'}\nmodel.sample(5, conditions=conditions)</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.55.06-AM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1022\" height=\"364\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2022/01/Screen-Shot-2022-01-19-at-11.55.06-AM.png 600w, https://sdv.ghost.io/content/images/size/w1000/2022/01/Screen-Shot-2022-01-19-at-11.55.06-AM.png 1000w, https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.55.06-AM.png 1022w\" sizes=\"(min-width: 720px) 720px\"></figure><p>The result is a variety of Cambridges that aren't necessarily in USA, GBR, or CAN. These aren't valid cities!</p><p><strong>What's going on?</strong> The SDV models include probabilities that some unseen combinations are possible. This is by design: Synthesizing new combinations -- that don't blatantly match the original data -- helps with privacy.</p><p>However in this particular case, we aren't worried about the privacy of a city belonging to a country or district. We actually <em>do</em> want the data to match. This is why we need to build a constraint.</p><h3 id=\"fixing-the-data-using-rejecting-sampling\">Fixing the data using rejecting sampling</h3><p>In our <a href=\"https://sdv.dev/blog/eng-sdv-constraints/\" rel=\"nofollow\">previous article</a>, we described a solution called <code>reject_sampling</code> that works on any type of constraint and is very easy to build: We simply create the synthetic data as usual and then throw out (reject) any data that doesn't match.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://sdv.ghost.io/content/images/2022/01/UniqueCombinations-02.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"883\" height=\"316\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2022/01/UniqueCombinations-02.png 600w, https://sdv.ghost.io/content/images/2022/01/UniqueCombinations-02.png 883w\" sizes=\"(min-width: 720px) 720px\"></figure><p>In theory, this can solve our <code>UniqueCombinations</code> constraint. In practice, this strategy is only efficient if the model can easily generate acceptable data. Let's calculate the chances of getting an acceptable combination (<code>Name</code>, <code>CountryCode</code>, <code>District</code>) from the model.</p><pre><code class=\"language-python\">np.random.seed(0)\n\n# Sample data from the model\n# The sample may include combinations that aren't valid\nn = 100000\nnew_data = model.sample(n)\n\n# Calculate how many rows are valid\ncombo = ['Name', 'CountryCode', 'District']\nmerged = new_data.merge(data, left_on=combo, right_on=combo, how='left')\npassed = merged[merged['ID_y'].notna()].shape[0]\n\n# Print out our results\nprint(\"Valid rows: \", (passed/n)*100, \"%\")\nprint(\"Rejected rows: \", (1 - passed/n)*100, \"%\")</code></pre><pre><code>Valid rows:  0.038 %\nRejected rows:  99.96199999999999 %</code></pre><p>With such a low probability of passing the constraint, this strategy can become intractable.</p><h3 id=\"fixing-the-data-using-transformations\">Fixing the data using transformations</h3><p>A more efficient strategy is for the ML model to learn the constraint directly, so it always produces acceptable data. We can do this by transforming the data in a clever way, forcing the model to learn the logic.</p><p>Our <a href=\"https://sdv.dev/blog/eng-sdv-constraints/\" rel=\"nofollow\">previous article</a> described how to do this for a different constraint. Unfortunately, the exact same transformation won't work to solve our current <code>UniqueCombinations</code> constraint. <strong>The transform strategy requires a different, creative solution for each constraint.</strong> So we have to start from scratch.</p><p>Can you think of any other ways to enforce <code>UniqueCombinations</code>?</p><p><strong>A solution: Concatenating the data</strong></p><p>One solution is to concatenate the data. That is, rather than treating the city <code>Name</code>, <code>CountryCode</code> and <code>District</code> as separate items, we treat them as a single value. This will force the model to learn them as 1 single concept rather than as multiple columns that can be recombined.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://sdv.ghost.io/content/images/2022/01/UniqueCombinations-01.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1524\" height=\"1200\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2022/01/UniqueCombinations-01.png 600w, https://sdv.ghost.io/content/images/size/w1000/2022/01/UniqueCombinations-01.png 1000w, https://sdv.ghost.io/content/images/2022/01/UniqueCombinations-01.png 1524w\" sizes=\"(min-width: 720px) 720px\"></figure><p>Let's see this in action.</p><pre><code class=\"language-python\"># create transformed data that concatenates the columns\ndata_transform = data.copy()\n\n# Concatenate the data using a separator\ndata_transform['concatenated'] = data_transform['Name'] + '#' + data_transform['CountryCode'] + '#' + data_transform['District']\n\n# We can drop the individual columns\ndata_transform.drop(labels=['Name', 'CountryCode', 'District'],\n                    axis=1, inplace=True)\n\ndata_transform.head()</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.58.21-AM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"828\" height=\"368\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2022/01/Screen-Shot-2022-01-19-at-11.58.21-AM.png 600w, https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.58.21-AM.png 828w\" sizes=\"(min-width: 720px) 720px\"></figure><p>Now, we can train the model using the transformed (concatenated) data instead.</p><pre><code class=\"language-python\">np.random.seed(35)\n\n# create a new model that will learn from the transformed data\nmodel_transform = GaussianCopula(categorical_transformer='label_encoding')\nmodel_transform.fit(data_transform)\n\n# this will produce transformed data\noutput = model_transform.sample()\noutput.head(5)</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.58.53-AM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"882\" height=\"368\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2022/01/Screen-Shot-2022-01-19-at-11.58.53-AM.png 600w, https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.58.53-AM.png 882w\" sizes=\"(min-width: 720px) 720px\"></figure><p>To get back realistic-looking data, we can convert the concatenated column back into <code>Name</code>, <code>City</code> and <code>District</code>.</p><pre><code class=\"language-python\">import pandas as pd\n\n# Split the conatenated column by the separator and save the reuslts\nnames = []\ncountrycodes = []\ndistricts = []\n\nfor x in output['concatenated']:\n  try:\n    name, countrycode, district = x.split('#')\n  except:\n    name, countrycode, district = [np.nan]*3\n  names.append(name)\n  countrycodes.append(countrycode)\n  districts.append(district)\n\n# Add the individual columns back in\noutput['Name'] = pd.Series(names)\noutput['CountryCode'] = pd.Series(countrycodes)\noutput['District'] = pd.Series(districts)\n\n# Drop the concatenated column\noutput.drop(labels=['concatenated'], axis=1, inplace=True)</code></pre><p>As a result, the output now looks like our original data.</p><pre><code class=\"language-python\">output.head()</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.59.41-AM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1020\" height=\"368\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2022/01/Screen-Shot-2022-01-19-at-11.59.41-AM.png 600w, https://sdv.ghost.io/content/images/size/w1000/2022/01/Screen-Shot-2022-01-19-at-11.59.41-AM.png 1000w, https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-11.59.41-AM.png 1020w\" sizes=\"(min-width: 720px) 720px\"></figure><p>Most importantly, the <code>Name</code>, <code>CountryCode</code> and <code>District</code> columns now make sense!</p><p><strong>Caveats of transforming the data</strong></p><p>The transform strategy is an efficient and elegant approach to modeling. But there is a downside: <strong>The transform strategy might lose some mathematical properties.</strong></p><p>To see why, consider the model's perspective:</p><ul><li><code>Cambridge#GBR#England</code> is completely different from</li><li><code>Cambridge#USA#Massachusetts</code> is completely different from</li><li><code>Boston#USA#Massachusetts</code></li></ul><p>The problem is that two of these actually have something in common -- they are located in <code>Massachusetts, USA</code>. So the model will not be able to learn anything special about <code>Massachusetts</code> or <code>USA</code> as a whole.</p><p>As an example, let's see how well the model was able to learn populations of US-based cities.</p><pre><code class=\"language-python\">import matplotlib.pyplot as plt\n\n# Populations of real US cities\nreal_usa = data.loc[data['CountryCode'] == 'USA', 'Population']\n\n# Populations of synthetic US cities\nsynth_usa = output.loc[output['CountryCode'] == 'USA', 'Population']\n\n# Plot the distributions\nplt.ylabel('US City Data')\nplt.xlabel('Population')\n_ = plt.boxplot([real_usa, synth_usa],\n                showfliers=False,\n                labels=['Real', 'Synthetic'],\n                vert=False\n)\nplt.show()</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-12.00.53-PM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1022\" height=\"500\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2022/01/Screen-Shot-2022-01-19-at-12.00.53-PM.png 600w, https://sdv.ghost.io/content/images/size/w1000/2022/01/Screen-Shot-2022-01-19-at-12.00.53-PM.png 1000w, https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-12.00.53-PM.png 1022w\" sizes=\"(min-width: 720px) 720px\"></figure><p>The real data shows less variation in city population than the synthetic data. The differences make sense because our model wasn't able to learn about the USA as one complete concept.</p><p><strong>Can we fix this?</strong> It's challenging to fix this issue without degrading the mathematical correlations in some other way. If you have any ideas, we welcome you to <a href=\"https://github.com/sdv-dev/SDV/issues/414\" rel=\"nofollow\">join our discussion</a>!</p><h3 id=\"inputting-a-uniquecombination-into-the-sdv\">Inputting a UniqueCombination into the SDV</h3><p>We built the constraint -- both the <code>reject_sampling</code> and <code>transform</code> approaches -- directly into the SDV library. If you have <code>sdv</code> installed, this is ready to use. Import the <code>UniqueCombinations</code> class from the <code>constraints</code> module.</p><pre><code class=\"language-python\">from sdv.constraints import UniqueCombinations\n\n# Create a Unique Combinations constraint\nunique_city_country_district = UniqueCombinations(\n  columns=['Name', 'CountryCode', 'District'],\n  handling_strategy='transform' # you can change this 'reject_sampling' too\n)\n\n# Create a new model using the constraint\nupdated_model = GaussianCopula(\n  constraints=[unique_city_country_district],\n  categorical_transformer='label_encoding'\n)</code></pre><p>Now, you can train the model on your data and sample synthetic data.</p><pre><code class=\"language-python\">np.random.seed(35)\n\nupdated_model.fit(data)\nupdated_model.sample(5)</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-12.02.30-PM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1146\" height=\"382\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2022/01/Screen-Shot-2022-01-19-at-12.02.30-PM.png 600w, https://sdv.ghost.io/content/images/size/w1000/2022/01/Screen-Shot-2022-01-19-at-12.02.30-PM.png 1000w, https://sdv.ghost.io/content/images/2022/01/Screen-Shot-2022-01-19-at-12.02.30-PM.png 1146w\" sizes=\"(min-width: 720px) 720px\"></figure><p>All of the synthetic data is guaranteed to follow the <code>UniqueCombinations</code> constraint.</p><h3 id=\"takeaways\">Takeaways</h3><ol><li>We can identify a <code>UniqueCombinations</code> requirement by asking: Should it be possible to further mix-and-match the data?</li><li>We can enforce any logical constraint by using reject sampling, which throws out any invalid data. This is not efficient for <code>UniqueCombinations</code>.</li><li>An alternative approach is to transform the data, forcing the ML model to learn the constraint. For <code>UniqueCombinations</code> we transformed the data by concatenating it.</li><li>The logic for <code>UniqueCombinations</code> is already built into the SDV's <code>constraints</code> module, and is ready to use.</li></ol><p>Further reading:</p><ul><li><a href=\"https://sdv.dev/blog/eng-sdv-constraints/\" rel=\"nofollow\">Engineering Constraints Blog Article</a></li><li><a href=\"https://sdv.dev/SDV/user_guides/single_table/constraints.html\" rel=\"nofollow\">Handling Constraints User Guide</a></li><li><a href=\"https://sdv.dev/SDV/api_reference/constraints/tabular.html\" rel=\"nofollow\">Tabular Constraints API</a></li></ul>","url":"https://sdv.ghost.io/building-unique-combinations/","canonical_url":null,"uuid":"01fb2714-6b15-4055-8a77-e7fde4a0f944","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"61e841116361ff003b9ca712","reading_time":7}},"pageContext":{"slug":"building-unique-combinations"}},"staticQueryHashes":["2061773391","2358152166","2362887240","2439066133","2561578252","2657115718","2731221146","2839364760","4145280475"]}